<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ARBAOTObjectTreeView</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Xpp = Microsoft.Dynamics.Ax.Xpp;
using ArbelaXpp = Arbela.Dynamics.Ax.Xpp;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// Override the Object Tree for Views
/// </summary>
[ARBAOTObjectType(ARBAOTObjectType::View)]
class ARBAOTObjectTreeView extends ARBAOTObjectTree
{
    Map dataSourceMap = new Map(Types::String, Types::Integer);
    Map currentDsMap;
    Map rangesMap = new Map(Types::String, Types::Integer);
    Map currentRangesMap;
    str currentDatasource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the object tree
    /// </summary>
    /// <param name = "_aotNodeName">The name of the AOT object</param>
    public void update(TreeNodeName _aotNodeName)
    {
        AxView view = Xpp.MetadataSupport::GetView(_aotNodeName);
        if (view != null)
        {
            collectionMap.insert(ARBAOTBrowserConstants::DataSources, dataSourceMap);
            super(_aotNodeName);
        }
        else
        {
            ARBAOTObjectTree objectTree = ARBAOTObjectTree::newFromAOTObject(treeControl, ARBAOTObjectType::DataEntity, extensionsInline);
            objectTree.update(_aotNodeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtensionCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of extensions to the tree
    /// </summary>
    /// <param name = "_collection">The collection to add</param>
    /// <param name = "_collectionName">The collection name</param>
    /// <param name = "_extensionName">The extension name</param>
    protected void addExtensionCollection(System.Collections.IEnumerable _collection, str _collectionName, str _extensionName)
    {
        System.Collections.IEnumerator modsEnum;
        switch (_collectionName)
        {
            case ARBAOTBrowserConstants::DataSources:
                modsEnum = _collection.GetEnumerator();
                while (modsEnum.MoveNext())
                {
                    AxQueryExtensionEmbeddedDataSource ds = modsEnum.Current;
                    this.addExtension(ds.DataSource, this.getNamedNode(dataSourceMap.lookup(ds.Parent), ARBAOTBrowserConstants::DataSources), _extensionName);
                }
                break;
            case ARBAOTBrowserConstants::Ranges:
                modsEnum = _collection.GetEnumerator();
                while (modsEnum.MoveNext())
                {
                    AxQueryExtensionQueryDataSourceRange range = modsEnum.Current;
                    this.addExtension(range.QueryDataSourceRange, this.getNamedNode(dataSourceMap.lookup(range.Parent), ARBAOTBrowserConstants::Ranges), _extensionName);
                }
                break;
            case ARBAOTBrowserConstants::FieldGroupExtensions:
                System.Collections.IEnumerator fieldGroupEnum = _collection.GetEnumerator();
                if (collectionMap.exists(ARBAOTBrowserConstants::FieldGroups))
                {
                    Map fieldGroupsMap = collectionMap.lookup(ARBAOTBrowserConstants::FieldGroups);
                    while (fieldGroupEnum.MoveNext())
                    {
                        AxTableFieldGroupExtension fieldGroupExtension = fieldGroupEnum.Current;
                        TreeItemIdx parentIdx = fieldGroupsMap.lookup(fieldGroupExtension.Name);
                        parentIdx = treeControl.getChild(parentIdx); // Get the index of the Fields node
                        var fieldsEnum = fieldGroupExtension.Fields.GetEnumerator();
                        while (fieldsEnum.MoveNext())
                        {
                            this.addExtension(fieldsEnum.Current, parentIdx, _extensionName);
                        }
                    }
                }
                break;
            default:
                super(_collection, _collectionName, _extensionName);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new node to the tree
    /// </summary>
    /// <param name = "_object">The object to add</param>
    /// <param name = "_idx">The tree index to add it under</param>
    /// <param name = "_formTreeAdd">The order it should add the node</param>
    /// <param name = "extensionName">The name of the extension it came from, if any</param>
    /// <returns>The tree index of the new node</returns>
    public TreeItemIdx addTreeNode(anytype _object, TreeItemIdx _idx, int _formTreeAdd = FormTreeAdd::Sort, boolean _skipAddHeader = false, str _extensionName = '')
    {
        if (_object == null)
        {
            return 0;
        }

        str objectName = this.getObjectName(_object);
        boolean insertIntoMap = false;
        if (_object is AxQuerySimpleRootDataSource)
        {
            insertIntoMap = true;
            currentDsMap = dataSourceMap;
        }

        boolean insertIntoRangeMap = false;
        if (_object is AxQuerySimpleDataSource)
        {
            insertIntoRangeMap = true;
            currentRangesMap = rangesMap;
            collectionMap.insert(ARBAOTBrowserConstants::Ranges, rangesMap);
            currentDatasource = objectName;
        }

        TreeItemIdx parentIdx;
        if (_object is AxQuerySimpleDataSourceRelation)
        {
            AxQuerySimpleDataSourceRelation relation = _object as AxQuerySimpleDataSourceRelation;
            str name;
            if (relation.JoinRelationName)
            {
                name = relation.JoinRelationName;
            }
            else
            {
                name = strFmt('%1.%2 == %3.%4', relation.JoinDataSource, relation.Field, currentDatasource, relation.RelatedField);
            }
            parentIdx = SysFormTreeControl::addTreeItem(treeControl, name + (_extensionName == '' ? '' : ' (' + _extensionName + ')'), _idx, _object, 0, false, 0, _formTreeAdd);
        }
        else
        {
            parentIdx = super(_object, _idx, _formTreeAdd, _skipAddHeader, _extensionName);
        }

        if (currentDsMap != null
            && (_object is AxQuerySimpleDataSource))
        {
            currentDsMap.insert(objectName, parentIdx);
        }

        if (insertIntoMap)
        {
            currentDsMap = null;
        }

        if (currentRangesMap != null
            && (_object is AxQuerySimpleDataSourceRange))
        {
            currentRangesMap.insert(objectName, parentIdx);
        }

        if (insertIntoRangeMap)
        {
            currentRangesMap = null;
        }

        return parentIdx;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>